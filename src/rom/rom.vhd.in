----------------------------------------------------------------------------------------------------
-- Copyright (c) 2019 Marcus Geelnard
--
-- This software is provided 'as-is', without any express or implied warranty. In no event will the
-- authors be held liable for any damages arising from the use of this software.
--
-- Permission is granted to anyone to use this software for any purpose, including commercial
-- applications, and to alter it and redistribute it freely, subject to the following restrictions:
--
--  1. The origin of this software must not be misrepresented; you must not claim that you wrote
--     the original software. If you use this software in a product, an acknowledgment in the
--     product documentation would be appreciated but is not required.
--
--  2. Altered source versions must be plainly marked as such, and must not be misrepresented as
--     being the original software.
--
--  3. This notice may not be removed or altered from any source distribution.
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
-- This is a single-ported ROM (Wishbone B4 pipelined interface).
----------------------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity rom is
  port(
    -- Control signals.
    i_clk : in std_logic;

    -- Wishbone memory interface (b4 pipelined slave).
    -- See: https://cdn.opencores.org/downloads/wbspec_b4.pdf
    i_wb_cyc : in std_logic;
    i_wb_stb : in std_logic;
    i_wb_adr : in std_logic_vector(29 downto 0);
    o_wb_dat : out std_logic_vector(31 downto 0);
    o_wb_ack : out std_logic;
    o_wb_stall : out std_logic
  );
end rom;

architecture rtl of rom is
  constant C_ADDR_BITS : positive := ${ADDR_BITS};
  subtype WORD_T is std_logic_vector(31 downto 0);
  type MEM_T is array (0 to 2**C_ADDR_BITS-1) of WORD_T;
  signal C_ROM : MEM_T := (
${DATA}
  );

  signal s_is_valid_wb_request : std_logic;
  signal s_rom_addr : unsigned(C_ADDR_BITS-1 downto 0);
  signal s_dat : WORD_T := (others => '0');
begin
  -- Wishbone control logic. We always ack and never stall - we're that fast ;-)
  s_is_valid_wb_request <= i_wb_cyc and i_wb_stb;
  process(i_clk)
  begin
    if rising_edge(i_clk) then
      o_wb_ack <= s_is_valid_wb_request;
    end if;
  end process;
  o_wb_stall <= '0';

  -- Actual ROM.
  s_rom_addr <= unsigned(i_wb_adr(C_ADDR_BITS-1 downto 0));
  process(i_clk)
  begin
    if rising_edge(i_clk) then
      s_dat <= C_ROM(to_integer(s_rom_addr));
    end if;
  end process;

  -- Output signal.
  o_wb_dat <= s_dat;
end rtl;
